// Mocks generated by Mockito 5.4.0 from annotations
// in weather_android_app/test/modules/visibility/entity/weather_entity_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_android_app/modules/visibility/entity/weather_entity.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIconData_0 extends _i1.SmartFake implements _i2.IconData {
  _FakeIconData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherEntity extends _i1.Mock implements _i3.WeatherEntity {
  @override
  _i2.IconData get icon => (super.noSuchMethod(
        Invocation.getter(#icon),
        returnValue: _FakeIconData_0(
          this,
          Invocation.getter(#icon),
        ),
        returnValueForMissingStub: _FakeIconData_0(
          this,
          Invocation.getter(#icon),
        ),
      ) as _i2.IconData);
  @override
  set icon(_i2.IconData? _icon) => super.noSuchMethod(
        Invocation.setter(
          #icon,
          _icon,
        ),
        returnValueForMissingStub: null,
      );
  @override
  double get visibility => (super.noSuchMethod(
        Invocation.getter(#visibility),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  set visibility(double? _visibility) => super.noSuchMethod(
        Invocation.setter(
          #visibility,
          _visibility,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get dateTime => (super.noSuchMethod(
        Invocation.getter(#dateTime),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set dateTime(String? _dateTime) => super.noSuchMethod(
        Invocation.setter(
          #dateTime,
          _dateTime,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set dateNow(DateTime? _dateNow) => super.noSuchMethod(
        Invocation.setter(
          #dateNow,
          _dateNow,
        ),
        returnValueForMissingStub: null,
      );
}
